{"inputs":[{"mode":"gin"}],"outputs":[{"mode":"openapi","configuration":{"filePath":"openapi.generated.yaml"}}],"config":{"title":"Example API with Cache","description":"Generated by astra","version":"1.0.0","contact":{"name":"","url":"","email":""},"license":{"name":"","url":""},"secure":false,"host":"localhost","basePath":"","port":8000},"routes":[{"handler":"main.GetPosts","file":"getPosts.go","lineNo":10,"method":"GET","path":"/posts","contentType":"application/json","returnTypes":[{"statusCode":200,"field":{"package":"withcache/types","type":"slice","sliceType":"Post"}}],"operationId":"getPosts"},{"handler":"main.GetPost","file":"getPost.go","lineNo":10,"method":"GET","path":"/posts/:id","contentType":"application/json","params":[{"name":"id","type":{"type":"string"},"isRequired":true}],"returnTypes":[{"statusCode":400,"field":{"type":"string"}},{"statusCode":200,"field":{"package":"withcache/types","type":"Post"}}],"operationId":"getPost"},{"handler":"main.main.func1","file":"main.go","lineNo":20,"method":"GET","path":"/health","contentType":"application/json","returnTypes":[{"statusCode":200,"field":{"package":"github.com/gin-gonic/gin","type":"H"}}]},{"handler":"main.CreatePost","file":"createPost.go","lineNo":10,"method":"POST","path":"/posts","contentType":"application/json","bodyType":"application/json","body":[{"type":{"package":"withcache/types","type":"PostDTO"},"isBound":true}],"returnTypes":[{"statusCode":400,"field":{"type":"string"}},{"statusCode":200,"field":{"package":"withcache/types","type":"Post"}}],"operationId":"createPost"},{"handler":"main.UpdatePost","file":"updatePost.go","lineNo":10,"method":"PUT","path":"/posts/:id","contentType":"application/json","bodyType":"application/json","params":[{"name":"id","type":{"type":"string"},"isRequired":true}],"body":[{"type":{"package":"withcache/types","type":"PostDTO"},"isBound":true}],"returnTypes":[{"statusCode":400,"field":{"type":"string"}},{"statusCode":200,"field":{"package":"withcache/types","type":"Post"}}],"operationId":"updatePost"},{"handler":"main.DeletePost","file":"deletePost.go","lineNo":8,"method":"DELETE","path":"/posts/:id","contentType":"text/plain","params":[{"name":"id","type":{"type":"string"},"isRequired":true}],"returnTypes":[{"statusCode":400,"field":{"type":"string"}},{"statusCode":200,"field":{"type":"nil"}}],"operationId":"deletePost"}],"components":[{"package":"time","type":"time.Time","name":"Time","doc":"A Time represents an instant in time with nanosecond precision.\n\nPrograms using times should typically store and pass them as values,\nnot pointers. That is, time variables and struct fields should be of\ntype time.Time, not *time.Time.\n\nA Time value can be used by multiple goroutines simultaneously except\nthat the methods GobDecode, UnmarshalBinary, UnmarshalJSON and\nUnmarshalText are not concurrency-safe.\n\nTime instants can be compared using the Before, After, and Equal methods.\nThe Sub method subtracts two instants, producing a Duration.\nThe Add method adds a Time and a Duration, producing a Time.\n\nThe zero value of type Time is January 1, year 1, 00:00:00.000000000 UTC.\nAs this time is unlikely to come up in practice, the IsZero method gives\na simple way of detecting a time that has not been initialized explicitly.\n\nEach Time has associated with it a Location, consulted when computing the\npresentation form of the time, such as in the Format, Hour, and Year methods.\nThe methods Local, UTC, and In return a Time with a specific location.\nChanging the location in this way changes only the presentation; it does not\nchange the instant in time being denoted and therefore does not affect the\ncomputations described in earlier paragraphs.\n\nRepresentations of a Time value saved by the GobEncode, MarshalBinary,\nMarshalJSON, and MarshalText methods store the Time.Location's offset, but not\nthe location name. They therefore lose information about Daylight Saving Time.\n\nIn addition to the required “wall clock” reading, a Time may contain an optional\nreading of the current process's monotonic clock, to provide additional precision\nfor comparison or subtraction.\nSee the “Monotonic Clocks” section in the package documentation for details.\n\nNote that the Go == operator compares not just the time instant but also the\nLocation and the monotonic clock reading. Therefore, Time values should not\nbe used as map or database keys without first guaranteeing that the\nidentical Location has been set for all values, which can be achieved\nthrough use of the UTC or Local method, and that the monotonic clock reading\nhas been stripped by setting t = t.Round(0). In general, prefer t.Equal(u)\nto t == u, since t.Equal uses the most accurate comparison available and\ncorrectly handles the case when only one of its arguments has a monotonic\nclock reading."},{"package":"withcache/types","type":"struct","name":"Author","structFields":{"FirstName":{"type":"string","structFieldBindingTags":{"json":{"name":"first_name","is_shown":true}}},"ID":{"type":"int","structFieldBindingTags":{"json":{"name":"id","is_shown":true}}},"LastName":{"type":"string","structFieldBindingTags":{"json":{"name":"last_name","is_shown":true}}}}},{"package":"withcache/types","type":"struct","name":"Comment","structFields":{"Author":{"package":"withcache/types","type":"Author","structFieldBindingTags":{"json":{"name":"author","is_shown":true}}},"Body":{"type":"string","structFieldBindingTags":{"json":{"name":"body","is_shown":true}}},"ID":{"type":"int","structFieldBindingTags":{"json":{"name":"id","is_shown":true}}}}},{"package":"withcache/types","type":"struct","name":"Post","structFields":{"Author":{"package":"withcache/types","type":"Author","structFieldBindingTags":{"json":{"name":"author","is_shown":true}}},"Body":{"type":"string","structFieldBindingTags":{"json":{"name":"body","is_shown":true}}},"Comments":{"package":"withcache/types","type":"slice","sliceType":"Comment","structFieldBindingTags":{"json":{"name":"comments","is_shown":true}}},"ID":{"type":"int","structFieldBindingTags":{"json":{"name":"id","is_shown":true}}},"Name":{"type":"string","structFieldBindingTags":{"json":{"name":"name","is_shown":true}}},"PublishedAt":{"package":"time","type":"Time","structFieldBindingTags":{"json":{"name":"published_at","is_shown":true}}}}},{"package":"github.com/gin-gonic/gin","type":"map","name":"H","mapKeyType":"string","mapValueType":"any"},{"package":"withcache/types","type":"struct","name":"PostDTO","structFields":{"AuthorID":{"type":"int","structFieldBindingTags":{"json":{"name":"author_id","is_shown":true}}},"Body":{"type":"string","structFieldBindingTags":{"json":{"name":"body","is_shown":true}}},"Name":{"type":"string","structFieldBindingTags":{"json":{"name":"name","is_shown":true}}}}}]}