openapi: 3.0.0
info:
    title: Example API
    description: Generated by astra
    contact: {}
    license:
        name: ""
    version: 1.0.0
servers:
    - url: http://localhost:8000
paths:
    /health:
        get:
            responses:
                "200":
                    description: ""
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/gin.H'
    /posts:
        get:
            operationId: getPosts
            responses:
                "200":
                    description: ""
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/types.Post'
        post:
            operationId: createPost
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/types.PostDTO'
            responses:
                "200":
                    description: ""
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/types.Post'
                "400":
                    description: ""
                    content:
                        text/plain:
                            schema:
                                type: string
    /posts/{id}:
        get:
            operationId: getPost
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: ""
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/types.Post'
                "400":
                    description: ""
                    content:
                        text/plain:
                            schema:
                                type: string
        put:
            operationId: updatePost
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/types.PostDTO'
            responses:
                "200":
                    description: ""
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/types.Post'
                "400":
                    description: ""
                    content:
                        text/plain:
                            schema:
                                type: string
        delete:
            operationId: deletePost
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: ""
                "400":
                    description: ""
                    content:
                        text/plain:
                            schema:
                                type: string
components:
    schemas:
        gin.H:
            type: object
            additionalProperties: {}
            description: H is a shortcut for map[string]any
        sql.NullString:
            type: string
            description: |-
                NullString represents a string that may be null.
                NullString implements the Scanner interface so
                it can be used as a scan destination:

                	var s NullString
                	err := db.QueryRow("SELECT name FROM foo WHERE id=?", id).Scan(&s)
                	...
                	if s.Valid {
                	   // use s.String
                	} else {
                	   // NULL value
                	}
        time.Time:
            type: string
            format: date-time
            description: |-
                A Time represents an instant in time with nanosecond precision.

                Programs using times should typically store and pass them as values,
                not pointers. That is, time variables and struct fields should be of
                type time.Time, not *time.Time.

                A Time value can be used by multiple goroutines simultaneously except
                that the methods GobDecode, UnmarshalBinary, UnmarshalJSON and
                UnmarshalText are not concurrency-safe.

                Time instants can be compared using the Before, After, and Equal methods.
                The Sub method subtracts two instants, producing a Duration.
                The Add method adds a Time and a Duration, producing a Time.

                The zero value of type Time is January 1, year 1, 00:00:00.000000000 UTC.
                As this time is unlikely to come up in practice, the IsZero method gives
                a simple way of detecting a time that has not been initialized explicitly.

                Each Time has associated with it a Location, consulted when computing the
                presentation form of the time, such as in the Format, Hour, and Year methods.
                The methods Local, UTC, and In return a Time with a specific location.
                Changing the location in this way changes only the presentation; it does not
                change the instant in time being denoted and therefore does not affect the
                computations described in earlier paragraphs.

                Representations of a Time value saved by the GobEncode, MarshalBinary,
                MarshalJSON, and MarshalText methods store the Time.Location's offset, but not
                the location name. They therefore lose information about Daylight Saving Time.

                In addition to the required “wall clock” reading, a Time may contain an optional
                reading of the current process's monotonic clock, to provide additional precision
                for comparison or subtraction.
                See the “Monotonic Clocks” section in the package documentation for details.

                Note that the Go == operator compares not just the time instant but also the
                Location and the monotonic clock reading. Therefore, Time values should not
                be used as map or database keys without first guaranteeing that the
                identical Location has been set for all values, which can be achieved
                through use of the UTC or Local method, and that the monotonic clock reading
                has been stripped by setting t = t.Round(0). In general, prefer t.Equal(u)
                to t == u, since t.Equal uses the most accurate comparison available and
                correctly handles the case when only one of its arguments has a monotonic
                clock reading.
        types.Author:
            type: object
            properties:
                first_name:
                    type: string
                id:
                    type: integer
                    format: int32
                last_name:
                    type: string
                test_array:
                    maxLength: 5
                    type: array
                    items:
                        type: string
                test_map:
                    type: object
                    additionalProperties:
                        type: integer
                        format: int32
        types.Comment:
            type: string
        types.Post:
            type: object
            properties:
                author:
                    $ref: '#/components/schemas/types.Author'
                body:
                    $ref: '#/components/schemas/sql.NullString'
                comments:
                    type: array
                    items:
                        $ref: '#/components/schemas/types.Comment'
                id:
                    type: integer
                    format: int32
                name:
                    type: string
                published_at:
                    $ref: '#/components/schemas/time.Time'
        types.PostDTO:
            type: object
            properties:
                author_id:
                    type: integer
                    format: int32
                body:
                    $ref: '#/components/schemas/sql.NullString'
                name:
                    type: string
